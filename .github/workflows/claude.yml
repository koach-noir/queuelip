name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    # @claude コメントでトリガー
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
        
      - name: Call Claude API and Post Response
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Get user's message from the event
            let userMessage = '';
            let issueNumber = '';
            
            if (context.eventName === 'issue_comment') {
              userMessage = context.payload.comment.body;
              issueNumber = context.payload.issue.number;
            } else if (context.eventName === 'issues') {
              userMessage = context.payload.issue.body;
              issueNumber = context.payload.issue.number;
            } else if (context.eventName === 'pull_request_review_comment') {
              userMessage = context.payload.comment.body;
              issueNumber = context.payload.pull_request.number;
            }
            
            // Extract @claude request
            const claudeMatch = userMessage.match(/@claude\s+(.*?)(?:\n|$)/s);
            const claudeRequest = claudeMatch ? claudeMatch[1].trim() : userMessage;
            
            // Get repository context
            const repoFiles = {};
            try {
              // Get key files for context
              const filesToRead = [
                'package.json',
                'src-tauri/Cargo.toml', 
                'CLAUDE.md',
                'README.md'
              ];
              
              for (const filePath of filesToRead) {
                try {
                  const { data } = await github.rest.repos.getContent({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    path: filePath
                  });
                  
                  if (data.type === 'file') {
                    repoFiles[filePath] = Buffer.from(data.content, 'base64').toString('utf8');
                  }
                } catch (e) {
                  // File doesn't exist, skip
                  console.log(`File ${filePath} not found, skipping`);
                }
              }
            } catch (error) {
              console.log('Error reading repository files:', error);
            }
            
            // Prepare context for Claude
            const systemPrompt = `You are an AI assistant helping with the queuelip project, a Tauri-based desktop application with JavaScript frontend and Rust backend.

Project context:
${Object.entries(repoFiles).map(([file, content]) => `\n## ${file}\n\`\`\`\n${content.slice(0, 1000)}${content.length > 1000 ? '...' : ''}\n\`\`\``).join('\n')}

Please provide helpful, specific assistance based on the user's request. Focus on actionable advice for this Tauri/JavaScript project.`;

            // Call Anthropic API
            try {
              const response = await fetch('https://api.anthropic.com/v1/messages', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'x-api-key': process.env.ANTHROPIC_API_KEY,
                  'anthropic-version': '2023-06-01'
                },
                body: JSON.stringify({
                  model: 'claude-3-5-sonnet-20241022',
                  max_tokens: 2000,
                  system: systemPrompt,
                  messages: [
                    {
                      role: 'user',
                      content: claudeRequest
                    }
                  ]
                })
              });
              
              if (!response.ok) {
                throw new Error(`API call failed: ${response.status} ${response.statusText}`);
              }
              
              const data = await response.json();
              const claudeResponse = data.content[0].text;
              
              // Post response as comment
              const comment = `🤖 **Claude Code Response**

${claudeResponse}

---
*Powered by Claude 3.5 Sonnet via GitHub Actions*`;

              await github.rest.issues.createComment({
                issue_number: issueNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              
            } catch (error) {
              console.error('Error calling Claude API:', error);
              
              // Post error message
              const errorComment = `🤖 **Claude Code Error**

Sorry, I encountered an error while processing your request:

\`\`\`
${error.message}
\`\`\`

Please try again later or check the Actions logs for more details.

---
*Powered by Claude via GitHub Actions*`;

              await github.rest.issues.createComment({
                issue_number: issueNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: errorComment
              });
            }
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

  # 機能実装用（シンプル版）
  claude-implement:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/claude-implement')) ||
      (github.event_name == 'issues' && contains(github.event.issue.body, '/claude-implement'))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
        
      - name: Implement Feature with Claude
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get implementation request
            let userMessage = '';
            let issueNumber = '';
            
            if (context.eventName === 'issue_comment') {
              userMessage = context.payload.comment.body;
              issueNumber = context.payload.issue.number;
            } else if (context.eventName === 'issues') {
              userMessage = context.payload.issue.body;
              issueNumber = context.payload.issue.number;
            }
            
            const implementMatch = userMessage.match(/\/claude-implement\s+(.*?)(?:\n|$)/s);
            const implementRequest = implementMatch ? implementMatch[1].trim() : 'Please implement the requested feature';
            
            // Post implementation response
            const comment = `🤖 **Claude Implementation Request Received**

I've received your implementation request:
> ${implementRequest}

For complex implementations that require file changes, I recommend:

1. **Manual Implementation**: Use the local Claude Code CLI for complex changes
2. **Specific Requests**: Break down the request into smaller, specific tasks
3. **Code Review**: Use \`@claude\` for code review and suggestions

I can provide detailed implementation guidance and code suggestions. Would you like me to analyze the current codebase and provide specific implementation steps?

---
*For full implementation features, consider using Claude Code locally: \`claude\` in your terminal*`;

            await github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}